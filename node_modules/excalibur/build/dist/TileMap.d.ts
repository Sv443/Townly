import { BoundingBox } from './Collision/BoundingBox';
import { Engine } from './Engine';
import { Vector } from './Math/vector';
import { Logger } from './Util/Log';
import { SpriteSheet } from './Drawing/SpriteSheet';
import * as Events from './Events';
import { Entity } from './EntityComponentSystem/Entity';
import { ExcaliburGraphicsContext } from './Graphics';
import * as Graphics from './Graphics';
import { Sprite as LegacySprite } from './Drawing/Index';
/**
 * @hidden
 */
export declare class TileMapImpl extends Entity {
    private _token;
    private _onScreenXStart;
    private _onScreenXEnd;
    private _onScreenYStart;
    private _onScreenYEnd;
    private _spriteSheets;
    private _legacySpriteMap;
    logger: Logger;
    readonly data: Cell[];
    private _rows;
    private _cols;
    visible: boolean;
    isOffscreen: boolean;
    readonly cellWidth: number;
    readonly cellHeight: number;
    readonly rows: number;
    readonly cols: number;
    private _dirty;
    flagDirty(): void;
    private _transform;
    private _motion;
    private _collider;
    private _composite;
    get x(): number;
    set x(val: number);
    get y(): number;
    set y(val: number);
    get z(): number;
    set z(val: number);
    get rotation(): number;
    set rotation(val: number);
    get scale(): Vector;
    set scale(val: Vector);
    get pos(): Vector;
    set pos(val: Vector);
    get vel(): Vector;
    set vel(val: Vector);
    on(eventName: Events.preupdate, handler: (event: Events.PreUpdateEvent<TileMap>) => void): void;
    on(eventName: Events.postupdate, handler: (event: Events.PostUpdateEvent<TileMap>) => void): void;
    on(eventName: Events.predraw, handler: (event: Events.PreDrawEvent) => void): void;
    on(eventName: Events.postdraw, handler: (event: Events.PostDrawEvent) => void): void;
    on(eventName: string, handler: (event: Events.GameEvent<any>) => void): void;
    /**
     * @param xOrConfig     The x coordinate to anchor the TileMap's upper left corner (should not be changed once set) or TileMap option bag
     * @param y             The y coordinate to anchor the TileMap's upper left corner (should not be changed once set)
     * @param cellWidth     The individual width of each cell (in pixels) (should not be changed once set)
     * @param cellHeight    The individual height of each cell (in pixels) (should not be changed once set)
     * @param rows          The number of rows in the TileMap (should not be changed once set)
     * @param cols          The number of cols in the TileMap (should not be changed once set)
     */
    constructor(xOrConfig: number | TileMapArgs, y: number, cellWidth: number, cellHeight: number, rows: number, cols: number);
    _initialize(engine: Engine): void;
    /**
     *
     * @param key
     * @param spriteSheet
     * @deprecated No longer used, will be removed in v0.26.0
     */
    registerSpriteSheet(key: string, spriteSheet: SpriteSheet): void;
    registerSpriteSheet(key: string, spriteSheet: Graphics.SpriteSheet): void;
    /**
     * Tiles colliders based on the solid tiles in the tilemap.
     */
    private _updateColliders;
    /**
     * Returns the [[Cell]] by index (row major order)
     */
    getCellByIndex(index: number): Cell;
    /**
     * Returns the [[Cell]] by its x and y coordinates
     */
    getCell(x: number, y: number): Cell;
    /**
     * Returns the [[Cell]] by testing a point in global coordinates,
     * returns `null` if no cell was found.
     */
    getCellByPoint(x: number, y: number): Cell;
    getRows(): readonly Cell[][];
    getColumns(): readonly Cell[][];
    onPreUpdate(_engine: Engine, _delta: number): void;
    onPostUpdate(_engine: Engine, _delta: number): void;
    update(engine: Engine, delta: number): void;
    /**
     * Draws the tile map to the screen. Called by the [[Scene]].
     * @param ctx CanvasRenderingContext2D or ExcaliburGraphicsContext
     * @param delta  The number of milliseconds since the last draw
     */
    draw(ctx: CanvasRenderingContext2D | ExcaliburGraphicsContext, delta: number): void;
}
export interface TileMapArgs extends Partial<TileMapImpl> {
    x: number;
    y: number;
    cellWidth: number;
    cellHeight: number;
    rows: number;
    cols: number;
}
declare const TileMap_base: typeof TileMapImpl;
/**
 * The [[TileMap]] class provides a lightweight way to do large complex scenes with collision
 * without the overhead of actors.
 */
export declare class TileMap extends TileMap_base {
    constructor(config: TileMapArgs);
    constructor(x: number, y: number, cellWidth: number, cellHeight: number, rows: number, cols: number);
}
/**
 * @hidden
 */
export declare class CellImpl extends Entity {
    private _bounds;
    /**
     * World space x coordinate of the left of the cell
     */
    readonly x: number;
    /**
     * World space y coordinate of the top of the cell
     */
    readonly y: number;
    /**
     * Width of the cell in pixels
     */
    readonly width: number;
    /**
     * Height of the cell in pixels
     */
    readonly height: number;
    /**
     * Current index in the tilemap
     */
    readonly index: number;
    /**
     * Reference to the TileMap this Cell is associated with
     */
    map: TileMap;
    private _solid;
    /**
     * Wether this cell should be treated as solid by the tilemap
     */
    get solid(): boolean;
    /**
     * Wether this cell should be treated as solid by the tilemap
     */
    set solid(val: boolean);
    /**
     * Current list of graphics for this cell
     */
    readonly graphics: Graphics.Graphic[];
    /**
     * Abitrary data storage per cell, useful for any game specific data
     */
    data: Map<string, any>;
    /**
     * @param xOrConfig Gets or sets x coordinate of the cell in world coordinates or cell option bag
     * @param y       Gets or sets y coordinate of the cell in world coordinates
     * @param width   Gets or sets the width of the cell
     * @param height  Gets or sets the height of the cell
     * @param index   The index of the cell in row major order
     * @param solid   Gets or sets whether this cell is solid
     * @param graphics The list of tile graphics to use to draw in this cell (in order)
     */
    constructor(xOrConfig: number | CellArgs, y: number, width: number, height: number, index: number, solid?: boolean, graphics?: Graphics.Graphic[]);
    get bounds(): BoundingBox;
    get center(): Vector;
    /**
     * Add another [[Sprite]] to this cell
     * @deprecated Use addSprite, will be removed in v0.26.0
     */
    pushSprite(sprite: Graphics.Sprite | LegacySprite): void;
    /**
     * Add another [[Graphic]] to this TileMap cell
     * @param graphic
     */
    addGraphic(graphic: Graphics.Graphic | LegacySprite): void;
    /**
     * Remove an instance of a [[Graphic]] from this cell
     */
    removeGraphic(graphic: Graphics.Graphic | LegacySprite): void;
    /**
     * Clear all graphis from this cell
     */
    clearGraphics(): void;
}
export interface CellArgs extends Partial<CellImpl> {
    x: number;
    y: number;
    width: number;
    height: number;
    index: number;
    solid?: boolean;
    sprites?: Graphics.Sprite[];
}
declare const Cell_base: typeof CellImpl;
/**
 * TileMap Cell
 *
 * A light-weight object that occupies a space in a collision map. Generally
 * created by a [[TileMap]].
 *
 * Cells can draw multiple sprites. Note that the order of drawing is the order
 * of the sprites in the array so the last one will be drawn on top. You can
 * use transparency to create layers this way.
 */
export declare class Cell extends Cell_base {
    constructor(config: CellArgs);
    constructor(x: number, y: number, width: number, height: number, index: number, solid?: boolean, sprites?: Graphics.Sprite[]);
}
export {};
