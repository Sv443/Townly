import { Engine } from './Engine';
import { Color } from './Color';
import { Vector } from './Math/vector';
import { BaseAlign, FontStyle, FontUnit, TextAlign } from './Graphics/FontCommon';
import { SpriteFont as LegacySpriteFont } from './Drawing/SpriteSheet';
import { SpriteFont } from './Graphics';
import { Font } from './Graphics/Font';
import { Actor } from './Actor';
import { ActorArgs } from '.';
/**
 * Option for creating a label
 */
export interface LabelOptions {
    /**
     * Specify the label text
     */
    text?: string;
    /**
     * Specify the color of the text (does not apply to SpriteFonts)
     */
    color?: Color;
    x?: number;
    y?: number;
    pos?: Vector;
    /**
     * Optionally specify a sprite font, will take precedence over any other [[Font]]
     */
    spriteFont?: SpriteFont | LegacySpriteFont;
    /**
     * Specify a custom font
     */
    font?: Font;
}
/**
 * Labels are the way to draw small amounts of text to the screen. They are
 * actors and inherit all of the benefits and capabilities.
 */
export declare class Label extends Actor {
    font: Font;
    private _text;
    /**
     * The text to draw.
     */
    get text(): string;
    set text(text: string);
    get color(): Color;
    set color(color: Color);
    get opacity(): number;
    set opacity(opacity: number);
    /**
     * Sets or gets the bold property of the label's text, by default it's false
     * @deprecated Use [[Font.bold|Label.font.bold]]
     */
    get bold(): boolean;
    set bold(isBold: boolean);
    /**
     * The CSS font family string (e.g. `sans-serif`, `Droid Sans Pro`). Web fonts
     * are supported, same as in CSS.
     * @deprecated Use [[Font.family|Label.font.family]]
     */
    get fontFamily(): string;
    set fontFamily(family: string);
    /**
     * The font size in the selected units, default is 10 (default units is pixel)
     * @deprecated Use [[Font.size|Label.font.size]]
     */
    get fontSize(): number;
    set fontSize(sizeInUnit: number);
    /**
     * The font style for this label, the default is [[FontStyle.Normal]]
     * @deprecated Use [[Font.style|Label.font.style]]
     */
    get fontStyle(): FontStyle;
    set fontStyle(style: FontStyle);
    /**
     * The css units for a font size such as px, pt, em (SpriteFont only support px), by default is 'px';
     * @deprecated Use [[Font.unit|Label.font.unit]]
     */
    get fontUnit(): FontUnit;
    set fontUnit(unit: FontUnit);
    /**
     * Gets or sets the horizontal text alignment property for the label.
     * @deprecated Use [[Font.textAlign|Label.font.textAlign]]
     */
    get textAlign(): TextAlign;
    set textAlign(align: TextAlign);
    /**
     * Gets or sets the baseline alignment property for the label.
     * @deprecated Use [[Font.baseAlign|Label.font.baseAlign]]
     */
    get baseAlign(): BaseAlign;
    set baseAlign(align: BaseAlign);
    /**
     * Gets or sets the maximum width (in pixels) that the label should occupy
     * @deprecated The maxWidth constraint is gone
     */
    maxWidth: number;
    private _legacySpriteFont;
    private _spriteFont;
    /**
     * The [[LegacyDrawing.SpriteFont]] to use, if any. Overrides [[fontFamily]] if present.
     * @deprecated Use [[SpriteFont]]
     */
    get spriteFont(): LegacySpriteFont;
    set spriteFont(sf: LegacySpriteFont | SpriteFont);
    /**
     * Gets or sets the letter spacing on a Label. Only supported with Sprite Fonts.
     * @deprecated Use [[SpriteFont.spacing]]
     */
    letterSpacing: number;
    /**
     * Whether or not the [[SpriteFont]] will be case-sensitive when matching characters.
     * @deprecated Use Graphics.SpriteFont.caseInsensitve
     */
    caseInsensitive: boolean;
    private _graphicsContext;
    /**
     * Build a new label
     * @param options
     */
    constructor(options?: LabelOptions & ActorArgs);
    _initialize(engine: Engine): void;
    /**
     * Returns the width of the text in the label (in pixels);
     */
    getTextWidth(): number;
    /**
     * Sets the text shadow for sprite fonts
     * @param offsetX      The x offset in pixels to place the shadow
     * @param offsetY      The y offset in pixels to place the shadow
     * @param shadowColor  The color of the text shadow
     * @deprecated Use [[Font.shadow|Label.font.shadow]]
     */
    setTextShadow(offsetX: number, offsetY: number, shadowColor: Color): void;
    /**
     * Toggles text shadows on or off, only applies when using sprite fonts
     * @deprecated Use [[Font.shadow|Label.font.shadow]]
     */
    useTextShadow(on: boolean): void;
    /**
     * Clears the current text shadow
     * @deprecated Use [[Font.shadow|Label.font.shadow]]
     */
    clearTextShadow(): void;
    draw(_ctx: CanvasRenderingContext2D, _delta: number): void;
}
