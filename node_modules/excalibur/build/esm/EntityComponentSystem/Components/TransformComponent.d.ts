import { Matrix } from '../../Math/matrix';
import { Vector } from '../../Math/vector';
import { Component } from '../Component';
export interface Transform {
    /**
     * The [[CoordPlane|coordinate plane]] for this transform for the entity.
     */
    coordPlane: CoordPlane;
    /**
     * The current position of the entity in world space or in screen space depending on the the [[CoordPlane|coordinate plane]].
     *
     * If the entity has a parent this position is relative to the parent entity.
     */
    pos: Vector;
    /**
     * The z-index ordering of the entity, a higher values are drawn on top of lower values.
     * For example z=99 would be drawn on top of z=0.
     */
    z: number;
    /**
     * The rotation of the entity in radians. For example `Math.PI` radians is the same as 180 degrees.
     *
     * If the entity has a parent this rotation is relative to the parent.
     */
    rotation: number;
    /**
     * The scale of the entity. If the entity has a parent this scale is relative to the parent.
     */
    scale: Vector;
}
/**
 * Enum representing the coordinate plane for the position 2D vector in the [[TransformComponent]]
 */
export declare enum CoordPlane {
    /**
     * The world coordinate plane (default) represents world space, any entities drawn with world
     * space move when the camera moves.
     */
    World = "world",
    /**
     * The screen coordinate plane represents screen space, entities drawn in screen space are pinned
     * to screen coordinates ignoring the camera.
     */
    Screen = "screen"
}
export declare class TransformComponent extends Component<'ex.transform'> implements Transform {
    readonly type = "ex.transform";
    private _dirty;
    readonly matrix: Matrix;
    private _position;
    private _rotation;
    private _scale;
    private _recalculate;
    getGlobalMatrix(): Matrix;
    getGlobalTransform(): Transform;
    get parent(): TransformComponent | null;
    /**
     * The [[CoordPlane|coordinate plane|]] for this transform for the entity.
     */
    coordPlane: CoordPlane;
    /**
     * The current position of the entity in world space or in screen space depending on the the [[CoordPlane|coordinate plane]].
     *
     * If a parent entity exists coordinates are local to the parent.
     */
    get pos(): Vector;
    set pos(val: Vector);
    get dirty(): boolean;
    /**
     * The current world position calculated
     */
    get globalPos(): Vector;
    set globalPos(val: Vector);
    /**
     * The z-index ordering of the entity, a higher values are drawn on top of lower values.
     * For example z=99 would be drawn on top of z=0.
     */
    z: number;
    /**
     * The rotation of the entity in radians. For example `Math.PI` radians is the same as 180 degrees.
     */
    get rotation(): number;
    set rotation(val: number);
    get globalRotation(): number;
    set globalRotation(val: number);
    /**
     * The scale of the entity.
     */
    get scale(): Vector;
    set scale(val: Vector);
    get globalScale(): Vector;
    set globalScale(val: Vector);
    /**
     * Apply the transform to a point
     * @param point
     */
    apply(point: Vector): Vector;
    /**
     * Apply the inverse transform to a point
     * @param point
     */
    applyInverse(point: Vector): Vector;
}
