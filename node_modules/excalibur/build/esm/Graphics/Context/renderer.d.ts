import { BatchCommand } from './batch';
import { Shader } from './shader';
import { Pool, Poolable } from '../../Util/Pool';
export interface Renderer {
    render(): void;
}
export interface Ctor<T> {
    new (): T;
}
export interface BatchRendererOptions<T extends Poolable> {
    gl: WebGLRenderingContext;
    /**
     * Draw command constructor
     */
    command: Ctor<T>;
    /**
     * Number of vertices that are generated per draw command
     */
    verticesPerCommand?: number;
    /**
     * Maximum commands to batch before drawing
     */
    maxCommandsPerBatch?: number;
    /**
     * Override the built in command batching mechanism
     */
    batchFactory?: () => BatchCommand<T>;
}
export declare abstract class BatchRenderer<T extends Poolable> implements Renderer {
    priority: number;
    private _gl;
    private _vertices;
    private _verticesPerCommand;
    private _buffer;
    private _maxCommandsPerBatch;
    shader: Shader;
    commands: Pool<T>;
    private _batchPool;
    private _batches;
    constructor(options: BatchRendererOptions<T>);
    /**
     * Initialize render, builds shader and initialized webgl buffers
     */
    init(): void;
    get vertexSize(): number;
    addCommand(cmd: T): void;
    /**
     * Construct or return the Shader to be used in this batch renderer
     * @param gl
     */
    abstract buildShader(gl: WebGLRenderingContext): Shader;
    /**
     * Implement populating the vertex buffer, return the number of vertices added to the buffer
     * @param vertices
     * @param batch
     */
    abstract buildBatchVertices(vertexBuffer: Float32Array, batch: BatchCommand<T>): number;
    /**
     * Implement gl draw call to render batch. The vertextBuffer from buildBatchVertices is already bound and the data has been updated.
     */
    abstract renderBatch(gl: WebGLRenderingContext, batch: BatchCommand<T>, vertexCount: number): void;
    /**
     * Build batch geometry, submit to the gpu, and issue draw command to underlying webgl
     */
    render(): void;
}
