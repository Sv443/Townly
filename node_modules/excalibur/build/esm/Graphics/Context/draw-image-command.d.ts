import { Matrix } from '../../Math/matrix';
import { BoundingBox } from '../../Collision/Index';
import { Color } from '../../Color';
import { Pool, Poolable } from '../../Util/Pool';
import { HTMLImageSource } from './ExcaliburGraphicsContext';
import { Vector } from '../../Math/vector';
export declare enum DrawCommandType {
    Image = "image",
    Line = "line",
    Rectangle = "rectangle",
    Circle = "circle"
}
export declare class DrawImageCommand implements Poolable {
    _pool: Pool<this>;
    snapToPixel: boolean;
    image: HTMLImageSource;
    color: Color;
    type: DrawCommandType;
    opacity: number;
    width: number;
    height: number;
    dest: [number, number];
    view: [number, number, number, number];
    private _geom;
    constructor();
    constructor(image: HTMLImageSource, x: number, y: number);
    constructor(image: HTMLImageSource, x: number, y: number, width?: number, height?: number);
    constructor(image: HTMLImageSource, sx: number, sy: number, swidth?: number, sheight?: number, dx?: number, dy?: number, dwidth?: number, dheight?: number);
    init(image?: HTMLImageSource, sx?: number, sy?: number, swidth?: number, sheight?: number, dx?: number, dy?: number, dwidth?: number, dheight?: number): this;
    initRect(color: Color, start: Vector, width: number, height: number): this;
    initLine(color: Color, start: Vector, end: Vector, thickness: number): this;
    initCircle(pos: Vector, radius: number, color: Color): this;
    dispose(): this;
    applyTransform(transform: Matrix, opacity: number): void;
    get geometry(): [number, number][];
}
export declare class DrawRectCommand {
    dest: [number, number];
    width: number;
    height: number;
    constructor(x: number, y: number, width: number, height: number);
}
export declare class DrawDebugRectCommand {
    bounds: BoundingBox;
    color: Color;
    constructor(bounds: BoundingBox, color: Color);
}
