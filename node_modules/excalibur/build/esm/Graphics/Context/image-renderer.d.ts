import { Shader } from './shader';
import { BatchCommand } from './batch';
import { DrawImageCommand } from './draw-image-command';
import { BatchRenderer } from './renderer';
import { WebGLGraphicsContextInfo } from './ExcaliburGraphicsContextWebGL';
import { HTMLImageSource } from './ExcaliburGraphicsContext';
import { Color } from '../../Color';
import { Vector } from '../..';
export declare class BatchImage extends BatchCommand<DrawImageCommand> {
    maxDraws: number;
    maxTextures: number;
    textures: WebGLTexture[];
    commands: DrawImageCommand[];
    private _graphicMap;
    constructor(maxDraws: number, maxTextures: number);
    isFull(): boolean;
    canAdd(): boolean;
    private _isCommandFull;
    private _isTextureFull;
    private _wouldAddTexture;
    maybeAdd(command: DrawImageCommand): boolean;
    add(command: DrawImageCommand): void;
    bindTextures(gl: WebGLRenderingContext): void;
    getBatchTextureId(command: DrawImageCommand): number;
    dispose(): this;
    clear(): void;
}
export declare class ImageRenderer extends BatchRenderer<DrawImageCommand> {
    private _contextInfo;
    constructor(gl: WebGLRenderingContext, _contextInfo: WebGLGraphicsContextInfo);
    buildShader(gl: WebGLRenderingContext): Shader;
    private _transformFragmentSource;
    addCircle(pos: Vector, radius: number, color: Color): void;
    addRectangle(color: Color, pos: Vector, width: number, height: number): void;
    addLine(color: Color, start: Vector, end: Vector, thickness?: number): void;
    addImage(graphic: HTMLImageSource, sx: number, sy: number, swidth?: number, sheight?: number, dx?: number, dy?: number, dwidth?: number, dheight?: number): void;
    renderBatch(gl: WebGLRenderingContext, batch: BatchImage, vertexCount: number): void;
    buildBatchVertices(vertexBuffer: Float32Array, batch: BatchImage): number;
}
