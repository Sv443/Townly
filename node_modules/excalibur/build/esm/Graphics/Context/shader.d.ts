export interface VertexAttributeDefinition {
    name: string;
    size: number;
    glType: number;
    normalized: boolean;
    location: number;
}
export interface UniformDefinition {
    name: string;
    location: WebGLUniformLocation;
    type: string;
    data: any;
}
/**
 * Create a shader program for the Excalibur WebGL Graphics Context
 */
export declare class Shader {
    private _gl;
    private _vertexSource;
    private _fragmentSource;
    program: WebGLProgram | null;
    uniforms: {
        [variableName: string]: UniformDefinition;
    };
    attributes: {
        [variableName: string]: VertexAttributeDefinition;
    };
    layout: VertexAttributeDefinition[];
    /**
     * Create a shader program in excalibur
     * @param _gl WebGL graphics context
     * @param _vertexSource Vertex shader source as a string
     * @param _fragmentSource Fragment shader source as a string
     */
    constructor(_gl: WebGLRenderingContext, _vertexSource: string, _fragmentSource: string);
    private _createProgram;
    private _compileShader;
    /**
     * Compile the current shader against a webgl context
     * @param gl WebGL context
     */
    compile(gl: WebGLRenderingContext): WebGLProgram;
    /**
     * Add a uniform [[Matrix]] to the shader
     * @param name Name of the uniform in the shader source
     * @param data (4x4) matrix in column major order
     */
    addUniformMatrix(name: string, data: Float32Array): void;
    /**
     * Add a uniform array of numbers to the shader
     * @param name Name of the uniform in the shader source
     * @param data List of numbers
     */
    addUniformIntegerArray(name: string, data: number[]): void;
    /**
     * Add attributes in the order they appear in the VBO
     * @param name Name of the attribute in the shader source
     * @param size The size of the attribute in gl.Type units, for example `vec2 a_pos` would be 2 gl.FLOAT
     * @param glType The gl.Type of the attribute
     */
    addAttribute(name: string, size: number, glType: number, normalized?: boolean): void;
    /**
     * Number of javascript floats a vertex will take up
     */
    get vertexAttributeSize(): number;
    /**
     * Total number of bytes that the vertex will take up
     */
    get totalVertexSizeBytes(): number;
    /**
     * Get a previously defined attribute size in bytes
     * @param name
     */
    getAttributeSize(name: string): number;
    /**
     * Sets this shader program as the current in the underlying webgl context
     *
     * **Must** specify all attributes and uniforms before calling this
     */
    use(): void;
}
