import { Vector } from '../Math/vector';
import { BoundingBox } from '../Collision/Index';
import { Color } from '../Color';
import { ExcaliburGraphicsContext } from './Context/ExcaliburGraphicsContext';
import { BaseAlign, Direction, FontOptions, FontStyle, FontUnit, TextAlign, FontRenderer } from './FontCommon';
import { Raster, RasterOptions } from './Raster';
export declare class Font extends Raster implements FontRenderer {
    constructor(options?: FontOptions & RasterOptions);
    clone(): Font;
    /**
     * Font quality determines the size of the underlying rastered text, higher quality means less jagged edges.
     * If quality is set to 1, then just enough raster bitmap is generated to render the text.
     *
     * You can think of quality as how zoomed in to the text you can get before seeing jagged edges.
     *
     * (Default 4)
     */
    quality: number;
    family: string;
    style: FontStyle;
    bold: boolean;
    unit: FontUnit;
    textAlign: TextAlign;
    baseAlign: BaseAlign;
    direction: Direction;
    size: number;
    shadow: {
        blur?: number;
        offset?: Vector;
        color?: Color;
    };
    get fontString(): string;
    private _text;
    private _lines;
    private _textBounds;
    private _textWidth;
    private _textHeight;
    get width(): number;
    set width(value: number);
    get height(): number;
    set height(value: number);
    private get _rasterWidth();
    private get _rasterHeight();
    private get _halfRasterWidth();
    private get _halfRasterHeight();
    get localBounds(): BoundingBox;
    protected _drawImage(ex: ExcaliburGraphicsContext, x: number, y: number): void;
    protected _rotate(ex: ExcaliburGraphicsContext): void;
    protected _flip(ex: ExcaliburGraphicsContext): void;
    updateText(text: string): void;
    private _updateDimensions;
    protected _preDraw(ex: ExcaliburGraphicsContext, x: number, y: number): void;
    protected _postDraw(ex: ExcaliburGraphicsContext): void;
    private _applyFont;
    execute(ctx: CanvasRenderingContext2D): void;
    render(ex: ExcaliburGraphicsContext, text: string, x: number, y: number): void;
}
