import { Texture } from '../Drawing/Texture';
import { Sprite } from './Sprite';
import { Loadable } from '../Interfaces/Index';
export declare class ImageSource implements Loadable<HTMLImageElement> {
    readonly path: string;
    private _logger;
    private _resource;
    /**
     * The original size of the source image in pixels
     */
    get width(): number;
    /**
     * The original height of the source image in pixels
     */
    get height(): number;
    /**
     * Returns true if the Texture is completely loaded and is ready
     * to be drawn.
     */
    isLoaded(): boolean;
    /**
     * Access to the underlying html image elmeent
     */
    data: HTMLImageElement;
    get image(): HTMLImageElement;
    /**
     * Promise the resolves when the image is loaded and ready for use, does not initiate loading
     */
    ready: Promise<HTMLImageElement>;
    private _loadedResolve;
    /**
     * The path to the image, can also be a data url like 'data:image/'
     * @param path
     */
    constructor(path: string, bustCache?: boolean);
    /**
     * Begins loading the image and returns a promise that resolves when the image is loaded
     */
    load(): Promise<HTMLImageElement>;
    /**
     * Build a sprite from this ImageSource
     */
    toSprite(): Sprite;
    /**
     * Create a ImageSource from legacy texture
     * @param tex
     */
    static fromLegacyTexture(tex: Texture): ImageSource;
    /**
     * Unload images from memory
     */
    unload(): void;
}
