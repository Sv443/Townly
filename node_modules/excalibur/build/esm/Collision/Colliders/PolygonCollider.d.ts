import { Color } from '../../Color';
import { BoundingBox } from '../BoundingBox';
import { CollisionContact } from '../Detection/CollisionContact';
import { Projection } from '../../Math/projection';
import { Line } from '../../Math/line';
import { Vector } from '../../Math/vector';
import { Ray } from '../../Math/ray';
import { Transform } from '../../EntityComponentSystem';
import { Collider } from './Collider';
import { ExcaliburGraphicsContext } from '../..';
export interface PolygonColliderOptions {
    /**
     * Pixel offset relative to a collider's body transform position.
     */
    offset?: Vector;
    /**
     * Points in the polygon in order around the perimeter in local coordinates. These are relative from the body transform position.
     */
    points: Vector[];
    /**
     * Whether points are specified in clockwise or counter clockwise order, default counter-clockwise
     */
    clockwiseWinding?: boolean;
}
/**
 * Polygon collider for detecting collisions
 */
export declare class PolygonCollider extends Collider {
    /**
     * Pixel offset relative to a collider's body transform position.
     */
    offset: Vector;
    /**
     * Points in the polygon in order around the perimeter in local coordinates. These are relative from the body transform position.
     */
    points: Vector[];
    private _transform;
    private _transformedPoints;
    private _axes;
    private _sides;
    private _localSides;
    constructor(options: PolygonColliderOptions);
    /**
     * Returns a clone of this ConvexPolygon, not associated with any collider
     */
    clone(): PolygonCollider;
    /**
     * Returns the world position of the collider, which is the current body transform plus any defined offset
     */
    get worldPos(): Vector;
    /**
     * Get the center of the collider in world coordinates
     */
    get center(): Vector;
    /**
     * Calculates the underlying transformation from the body relative space to world space
     */
    private _calculateTransformation;
    /**
     * Gets the points that make up the polygon in world space, from actor relative space (if specified)
     */
    getTransformedPoints(): Vector[];
    /**
     * Gets the sides of the polygon in world space
     */
    getSides(): Line[];
    /**
     * Returns the local coordinate space sides
     */
    getLocalSides(): Line[];
    /**
     * Given a direction vector find the world space side that is most in that direction
     * @param direction
     */
    findSide(direction: Vector): Line;
    /**
     * Given a direction vector find the local space side that is most in that direction
     * @param direction
     */
    findLocalSide(direction: Vector): Line;
    /**
     * Get the axis associated with the convex polygon
     */
    get axes(): Vector[];
    update(transform: Transform): void;
    /**
     * Tests if a point is contained in this collider in world space
     */
    contains(point: Vector): boolean;
    getClosestLineBetween(collider: Collider): Line;
    /**
     * Returns a collision contact if the 2 colliders collide, otherwise collide will
     * return null.
     * @param collider
     */
    collide(collider: Collider): CollisionContact[];
    /**
     * Find the point on the collider furthest in the direction specified
     */
    getFurthestPoint(direction: Vector): Vector;
    /**
     * Find the local point on the collider furthest in the direction specified
     * @param direction
     */
    getFurthestLocalPoint(direction: Vector): Vector;
    /**
     * Finds the closes face to the point using perpendicular distance
     * @param point point to test against polygon
     */
    getClosestFace(point: Vector): {
        distance: Vector;
        face: Line;
    };
    /**
     * Get the axis aligned bounding box for the polygon collider in world coordinates
     */
    get bounds(): BoundingBox;
    /**
     * Get the axis aligned bounding box for the polygon collider in local coordinates
     */
    get localBounds(): BoundingBox;
    /**
     * Get the moment of inertia for an arbitrary polygon
     * https://en.wikipedia.org/wiki/List_of_moments_of_inertia
     */
    getInertia(mass: number): number;
    /**
     * Casts a ray into the polygon and returns a vector representing the point of contact (in world space) or null if no collision.
     */
    rayCast(ray: Ray, max?: number): Vector;
    /**
     * Project the edges of the polygon along a specified axis
     */
    project(axis: Vector): Projection;
    draw(ctx: CanvasRenderingContext2D, color?: Color, pos?: Vector): void;
    debug(ex: ExcaliburGraphicsContext, color: Color): void;
    debugDraw(ctx: CanvasRenderingContext2D, color?: Color): void;
}
